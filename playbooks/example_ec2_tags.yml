# ansible-playbook create-web.yml --extra-vars "count=n startindex=x env=production"
# provisions n web servers in prod env with indices x, x+1, x+2, ... x+n

---
  - name: "create and provision web servers in {{ env }} environment"
    hosts: localhost
    gather_facts: False
    vars:
      aws_key_pair: vixletriakkey
      security_group: RiakDB
      instance_type_aws: t2.micro
      region: us-east-1
      count: 3
      startindex: 1
      env: dead
      vol_device_name: /dev/xvdb
      vol_device_size: 10
      vol_device_type: gp2
      os.amazon.ami_id: ami-d05e75b8
    tasks:
      - name: launch instances
        local_action:
          module: ec2
          key_name: "{{ aws_key_pair }}"
          group: "{{ security_group }}" # Security group
          instance_type: "{{ instance_type_aws }}"
          volumes:
          - device_name: /dev/sda1
            device_type: standard
            volume_size: 8
            delete_on_termination: true
          - device_name: "{{ vol_device_name }}"
            device_type: "{{ vol_device_type }}"
            volume_size: "{{ vol_device_size }}"
            delete_on_termination: true
            # ephemerals are deleted by default on termination
          region: "{{ region }}"
          image: ami-d05e75b8
          wait: yes
          count: "{{ count }}"
          wait_timeout: 1000
        register: created
        tags:
          - create

      - name: write instance ids and public dns of the instances to local hosts file
        local_action:
          module: lineinfile
          dest: ./hosts
          line: "{{ item.id }} {{ item.public_dns_name }}"
          create: yes
        with_items: created.instances
        tags:
          - create

      - name: create identifier sequence for tagging
        debug: msg="{{ item }}"
        with_sequence: start="{{ startindex }}" count="{{ count }}" format=%02d
        no_log: true # mute output
        register: sequence
        tags:
          - tag

      - name: tag instances
        no_log: true
        local_action: >-
          ec2_tag
          resource={{ item.0.id }}
          region={{ region }}
        args:
          tags:
            Name: "use-{{ env|title }}-{{ item.1.msg }}"
            Env: "{{ env }}"
            client: vixlet
            application: db
            Region: "{{ region }}"
            # ID: "{{ item.1.msg }}"
        with_together:
          - created.instances
          - sequence.results
        tags:
          - tag
################ Commented out below as we dont use the DNS name's for Servers #################
      # - name: update dns records
      #   route53: >-
      #     command=create
      #     zone=vixletinternal.com
      #     record="use-{{ env|title }}-{{ item.1.msg }}".compute-1.amazonaws.com
      #     type=CNAME
      #     ttl=300
      #     value={{ item.0.public_dns_name }}
      #     overwrite=true
      #   with_together:
      #     - created.instances
      #     - sequence.results
      #   tags:
      #     - deploy

      - name: register instances with load balancers
        local_action: ec2_elb
        args:
          instance_id: "{{ item.id }}"
          ec2_elbs: "{{ elb_names.dead[env] }}"
          region: "{{ region }}"
          state: present
          wait: no
        with_items: created.instances
        tags:
          - deploy

      - name: add instances to an in-memory group
        no_log: true
        local_action: add_host hostname="{{ item.public_dns_name }}" groupname=fresh
        with_items: created.instances
        tags:
          - create

      - name: wait for ssh to come up
        local_action: wait_for host="{{ item.public_dns_name }}" port=22 delay=60 timeout=320 state=started
        with_items: created.instances
        tags:
          - create

  - name: provision the instances
    hosts: fresh
    user: ubuntu
    vars:
      user: ubuntu
    roles:
      - common
      # - swap
      # - python
    tags:
      - configure

  - name: summary of created instances
    hosts: fresh
    gather_facts: false
    sudo: no
    tasks:
      - name: Get instance ec2 facts
        action: ec2_facts
        no_log: true # mute output
        register: ec2_facts
      - name: Get resource tags from ec2 facts
        sudo: false
        no_log: true # mute output
        local_action: >-
          ec2_tag
          resource={{ ec2_facts.ansible_facts.ansible_ec2_instance_id }}
          region={{ region }}
          state=list
        register: ec2_tags
      - debug: msg="{{ ec2_facts.ansible_facts.ansible_ec2_instance_id }} | {{ ec2_facts.ansible_facts.ansible_ec2_instance_type }} | {{ ec2_tags.tags.Name }} | {{ ec2_facts.ansible_facts.ansible_ec2_public_hostname }}"
    tags:
      - create
